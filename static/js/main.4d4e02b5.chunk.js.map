{"version":3,"sources":["hooks/alert.jsx","hooks/theme.jsx","services/http.js","services/hive.js","services/communities.js","services/account.js","hooks/data.jsx","components/Button.jsx","components/Dropdown.jsx","hooks/utility.jsx","components/Nav.jsx","components/Info.jsx","pages/Home.jsx","pages/Community.jsx","pages/Profile.jsx","pages/Post.jsx","App.jsx","components/Alert.jsx","index.jsx"],"names":["AlertContext","React","createContext","alerts","showAlert","title","message","removeAlert","id","alertReducer","state","action","type","length","filter","AlertProvider","children","useReducer","dispatch","useEffect","timer","setTimeout","clearTimeout","Provider","value","useAlert","useContext","getInitialColorMode","persistedColorPreference","window","localStorage","getItem","mql","matchMedia","matches","ThemeContext","colorMode","undefined","setColorMode","ThemeProvider","useState","setColorModeState","document","documentElement","setAttribute","setDocumentColorMode","setItem","method","params","a","fetch","process","body","JSON","stringify","jsonrpc","resp","ok","Error","statusText","json","data","error","result","hiveClient","Client","getPopularCommunities","HTTP","post","limit","communities","map","key","name","hivemind","getCommunity","sort","tag","posts","permlink","author","REACT_APP_HIVE_USER","REACT_APP_HIVE_POSTING","unfollow","follower","following","broadcast","required_posting_auths","required_auths","what","PrivateKey","from","useGetCommunities","useQuery","initialData","loading","isLoading","useGetCommunity","communityName","community","useGetCommunityPosts","queryClient","useQueryClient","getCommunityPosts","enabled","onSuccess","forEach","setQueryData","useGetPost","getPost","useGetAccount","account","setAccount","setLoading","setError","database","getAccounts","then","acc","catch","finally","useGetFollowing","http","getFollowing","Button","forwardRef","ref","active","onClick","rest","className","classNames","Dropdown","label","items","open","setOpen","menuRef","useRef","btnRef","createRef","handler","ignoreRefs","listener","event","current","contains","target","some","ir","addEventListener","removeEventListener","useOnClickOutside","link","to","Nav","history","useHistory","push","Info","blockchain","getBlocks","block","block_id","witness","server_time","Date","timestamp","toUTCString","transactions","transaction_ids","useBlockInfo","Object","keys","toUpperCase","Home","Community","useParams","postsLoading","about","subscribers","post_id","Profile","followersLoading","mutation","useMutation","myAccountName","accountToUnfollow","_","variables","invalidateQueries","queryKey","exact","refetchActive","refetchInactive","onError","follow","mutate","Post","select","category","filteredCommunities","isIdle","postAuthor","dangerouslySetInnerHTML","__html","marked","App","Fragment","path","component","Alert","onClose","AlertOutlet","ReactDOM","createPortal","getElementById","QueryClient","render","StrictMode","client","position"],"mappings":"sRAIMA,EAAeC,IAAMC,cAAc,CACvCC,OAAQ,GACRC,UAAW,SAACC,EAAOC,GAAR,OAAoB,MAC/BC,YAAa,SAACC,GAAD,OAAQ,QAGvB,SAASC,EAAaC,EAAOC,GAC3B,OAAQA,EAAOC,MAEb,IAAK,MACH,MAAM,GAAN,mBACKF,GADL,CAEE,CAAEF,GAAIE,EAAMG,OAAS,EAAGP,QAASK,EAAOL,QAASD,MAAOM,EAAON,SAGnE,IAAK,SACH,OAAOK,EAAMI,QAAO,qBAAGN,KAAgBG,EAAOH,MAChD,QACE,OAAOE,GAIb,IAAMK,EAAgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACZC,qBAAWR,EAAc,IADb,mBAC/BC,EAD+B,KACxBQ,EADwB,KAOhCX,EAAc,SAACC,GACnBU,EAAS,CAAEN,KAAM,SAAUJ,QAiB7B,OAbAW,qBAAU,WACR,IAAIC,EAOJ,OANIV,EAAMG,SACRO,EAAQC,YAAW,WACjBd,EAAYG,EAAM,GAAGF,MAxCN,MA4CZ,WACLY,GAASE,aAAaF,MAEvB,CAACV,IAGF,cAACV,EAAauB,SAAd,CACEC,MAAO,CACLrB,OAAQO,EACRN,UA1BY,SAACC,EAAOC,GACxBY,EAAS,CAAEN,KAAM,MAAOP,QAAOC,aA0B3BC,eAJJ,SAOGS,KAKDS,EAAW,kBAAMC,qBAAW1B,IC9D3B,SAAS2B,IACd,IAAMC,EAA2BC,OAAOC,aAAaC,QAAQ,cAI7D,GAHmE,kBAA7BH,EAIpC,OAAOA,EAIT,IAAMI,EAAMH,OAAOI,WAAW,gCAE9B,MADuD,mBAAhBD,EAAIE,SAElCF,EAAIE,QAAU,OAIhB,QAOT,IAAMC,EAAelC,IAAMC,cAAc,CACvCkC,eAAWC,EACXC,aAAc,kBAAM,QAGhBC,EAAgB,SAAC,GAAkB,IAAhBvB,EAAe,EAAfA,SAAe,EACCwB,qBADD,mBAC/BJ,EAD+B,KACpBK,EADoB,KAGtCtB,qBAAU,WACRsB,EAAkBd,OACjB,IAQH,OACE,cAACQ,EAAaZ,SAAd,CAAuBC,MAAO,CAAEY,YAAWE,aAPxB,SAACd,IAhBjB,SAA8BY,GACnCM,SAASC,gBAAgBC,aAAa,QAASR,GAgB7CS,CAAqBrB,GACrBiB,EAAkBjB,GAClBK,OAAOC,aAAagB,QAAQ,aAActB,KAI1C,SACGR,K,gDCtBQ,M,2HArBb,WAAW+B,EAAQC,GAAnB,iBAAAC,EAAA,sEACqBC,MAJPC,wBAIsB,CAChCJ,OAAQ,OACRK,KAAMC,KAAKC,UAAU,CACnB9C,GAAI,EACJ+C,QAAS,MACTP,SACAD,aAPN,WACQS,EADR,QAWYC,GAXZ,sBAWsB,IAAIC,MAAJ,+BAAkCF,EAAKG,aAX7D,uBAaqBH,EAAKI,OAb1B,YAaQC,EAbR,QAeWC,MAfX,uBAewB,IAAIJ,MAAMG,EAAKC,MAAMxD,SAf7C,iCAiBSuD,EAAKE,QAjBd,4C,yECCWC,EAAa,IAAIC,SAAO,CAFFd,0BCC5B,SAAee,IAAtB,+B,4CAAO,4BAAAjB,EAAA,sEACqBkB,EAAKC,KAAK,8BAA+B,CACjEC,MAAO,KAFJ,cACCC,EADD,yBAIEA,EAAYC,KAAI,yCAAmB,CAAEC,IAArB,KAA0BnE,MAA1B,UAJlB,4C,kEAOA,WAA4BoE,GAA5B,SAAAxB,EAAA,+EACEe,EAAWU,SAASC,aAAa,CACtCF,UAFG,4C,kEAMA,WAAiCA,GAAjC,eAAAxB,EAAA,sEACekB,EAAKC,KAAK,0BAA2B,CACvDC,MAAO,GACPO,KAAM,WACNC,IAAKJ,IAJF,cACCK,EADD,yBAOEA,GAPF,4C,kEAUA,iCAAA7B,EAAA,6DAAyB8B,EAAzB,EAAyBA,SAAUC,EAAnC,EAAmCA,OAAnC,SACcb,EAAKC,KAAK,kBAAmB,CAC9CY,SACAD,aAHG,cACCX,EADD,yBAMEA,GANF,4C,4BCtBiDjB,yTAAhD8B,E,EAAAA,oBAAqBC,E,EAAAA,uBAsBtB,SAASC,EAASC,EAAUC,GACjC,OAAOrB,EAAWsB,UAAU1B,KAC1B,CACEpD,GAAI,SACJ+E,uBAAwB,CAACN,GACzBO,eAAgB,GAChB5B,KAAMP,KAAKC,UAAU,CAAC,SAAU,CAAE8B,WAAUC,YAAWI,KAAM,OAE/DC,aAAWC,KAAKT,ICtBb,SAASU,IAAqB,IAAD,EAK9BC,mBAAS,cAAe3B,EAAuB,CACjD4B,YAAa,KAGf,MAAO,CAAExB,YATyB,EAEhCT,KAOoBkC,QATY,EAGhCC,UAM6BlC,MATG,EAIhCA,OASG,SAASmC,EAAgBC,GAAgB,IAAD,EAKzCL,mBACF,CAAC,cAAeK,IAChB,kBFtBG,SAAP,kCEsBUvB,CAAauB,KACnB,CACEJ,YAAa,KAIjB,MAAO,CAAEK,UAboC,EAE3CtC,KAWkBkC,QAbyB,EAG3CC,UAU2BlC,MAbgB,EAI3CA,OAgBG,SAASsC,EAAqBF,GACnC,IAAMG,EAAcC,2BAD8B,EAO9CT,mBACF,CAAC,QAASK,IACV,kBFtCG,SAAP,kCEsCUK,CAAkBL,KACxB,CACEM,UAAWN,EACXJ,YAAa,GACbW,UAAW,SAAC3B,GAEVA,EAAM4B,SAAQ,SAACtC,GACbiC,EAAYM,aAAa,CAAC,QAASvC,EAAKY,OAAQZ,EAAKW,UAAWX,SAMxE,MAAO,CAAEU,MAtByC,EAIhDjB,KAkBckC,QAtBkC,EAKhDC,UAiBuBlC,MAtByB,EAMhDA,OAoBG,SAAS8C,EAAT,GAA2C,IAArB5B,EAAoB,EAApBA,OAAQD,EAAY,EAAZA,SAAY,EAK3Cc,mBACF,CAAC,QAASb,EAAQD,IAClB,kBFpDG,SAAP,kCEoDU8B,CAAQ,CAAE7B,SAAQD,eACxB,CACEe,YAAa,KAIjB,MAAO,CAAE1B,KAbsC,EAE7CP,KAWakC,QAbgC,EAG7CC,UAUsBlC,MAbuB,EAI7CA,OAiCG,SAASgD,IAAiB,IAAD,EACAtE,mBAAS,IADT,mBACvBuE,EADuB,KACdC,EADc,OAEAxE,qBAFA,mBAEvBuD,EAFuB,KAEdkB,EAFc,OAGJzE,qBAHI,mBAGvBsB,EAHuB,KAGhBoD,EAHgB,KAgB9B,OAXA/F,qBAAU,WACR8F,GAAW,GD3GNjD,EAAWmD,SAASC,YAAY,CAACnC,IC8GnCoC,MAAK,SAACC,GAAD,OAASN,EAAWM,EAAI,OAC7BC,MAAML,GACNM,SAAQ,WACPP,GAAW,QAEd,IAEI,CAAEF,UAAShB,UAASjC,SAItB,SAAS2D,EAAgBV,GAAU,IAAD,EAKnClB,mBAAS,kBAAkB,kBD3H1B,SAAsBkB,GAC3B,OAAOW,EAAKtD,KAAK,8BAA+B,CAAC2C,EAAS,KAAM,SC0H3BY,CAAaZ,KAAU,CAC1DjB,YAAa,GACbU,UAAWO,IAGb,MAAO,CAAE1B,UAV8B,EAErCxB,KAQkBkC,QAVmB,EAGrCC,UAO2BlC,MAVU,EAIrCA,OD9FJqB,EAASF,EAAqB,c,oBETf2C,EA1BAC,sBAAW,WAAyCC,GAAzC,IAAGC,EAAH,EAAGA,OAAQ/G,EAAX,EAAWA,SAAUgH,EAArB,EAAqBA,QAAYC,EAAjC,sDACxB,gDACEH,IAAKA,EACLI,UAAWC,IAAW,8KASpB,CACE,mBAAoBJ,EACpB,qBAAsBA,EACtB,cAAeA,EACf,gBAAiBA,IAGrBC,QAASA,GACLC,GAnBN,aAqBGjH,QCpBL,IAmCeoH,EAnCE,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAAuB,IAAhBC,aAAgB,MAAR,GAAQ,IACjB9F,oBAAS,GADQ,mBAClC+F,EADkC,KAC5BC,EAD4B,KAEnCC,EAAUC,mBACVC,EAASC,sBAUf,OChBK,SAA2Bd,EAAKe,GAA2B,IAAlBC,EAAiB,uDAAJ,GAC3D3H,qBACE,WACE,IAAM4H,EAAW,SAACC,IAIblB,EAAImB,SACLnB,EAAImB,QAAQC,SAASF,EAAMG,SAC3BL,EAAWM,MAAK,SAACC,GAAD,OAAQA,EAAGJ,QAAQC,SAASF,EAAMG,YAIpDN,EAAQG,IAIV,OAFAtG,SAAS4G,iBAAiB,YAAaP,GACvCrG,SAAS4G,iBAAiB,aAAcP,GACjC,WACLrG,SAAS6G,oBAAoB,YAAaR,GAC1CrG,SAAS6G,oBAAoB,aAAcR,MAW/C,CAACjB,EAAKe,EAASC,IDtBjBU,CACEf,GACA,WACED,GAAQ,KAEV,CAACG,IAID,sBAAKT,UAAU,gBAAf,UACE,cAAC,EAAD,CAAQJ,IAAKa,EAAQZ,OAAQQ,EAAMP,QAAS,kBAAMQ,GAASD,IAA3D,SACGF,IAGFE,GACC,oBACET,IAAKW,EACLP,UAAU,uGAFZ,SAIGI,EAAM/D,KAAI,gBAAG8D,EAAH,EAAGA,MAAOoB,EAAV,EAAUA,KAAV,OACT,oBAAIvB,UAAU,qCAAiDF,QAAS,kBAAMQ,GAAQ,IAAtF,SACE,cAAC,IAAD,CAAMkB,GAAID,EAAV,SAAiBpB,KADqCA,YEoDrDsB,EAxEH,WACV,IAAMC,EAAUC,cADA,ETyCKnI,qBAAWS,GSvCxBC,EAFQ,EAERA,UAAWE,EAFH,EAEGA,aACXlC,EAAcqB,IAAdrB,UAHQ,EAKwBwF,IAAhCtB,EALQ,EAKRA,YAAayB,EALL,EAKKA,QAASjC,EALd,EAKcA,MAS9B,OAPA3C,qBAAU,WACJ2C,GACF1D,EAAU,kCAAmC0D,EAAMxD,WAGpD,CAACwD,IAGF,sBAAKoE,UAAU,yCAAf,UACE,sBAAKA,UAAU,OAAf,UAEE,sBACEA,UAAU,0DACVF,QAAS,kBAAM4B,EAAQE,KAAK,MAF9B,iCAQA,cAAC,EAAD,CACEzB,MACE,uBACEH,UAAWC,IAAW,oBAAqB,CACzC,aAAcpC,EACd,sBAAuBA,EACvB,cAAeA,IAJnB,iCAQGA,GAAW,cAAC,IAAD,CAAamC,UAAU,iCAGvCI,MAAOhE,EAAYC,KAAI,gBAAGC,EAAH,EAAGA,IAAH,MAAqB,CAC1C6D,MADqB,EAAQhI,MAE7BoJ,KAAK,yBAAD,OAA2BjF,SAInC,cAAC,EAAD,UACE,cAAC,IAAD,CAAMkF,GAAG,WAAT,0BAIJ,yBACE1B,QAAS,WACW,SAAd5F,GACFE,EAAa,SACblC,EAAU,gBAAD,4CAETkC,EAAa,QACblC,EAAU,gBAAD,qDAPf,UAWiB,SAAdgC,GACC,cAAC,IAAD,CAAS8F,UAAU,8BAEN,UAAd9F,GACC,cAAC,IAAD,CAAU8F,UAAU,qCCxCf6B,EA/BF,WAAO,IACVlG,ELmFH,WACL,IAAMwC,EAAcC,2BAepB,OAbAnF,qBAAU,WACR,sBAAC,wCAAA8B,EAAA,uFHrFIe,EAAWgG,WAAWC,aGqF1B,yHACkBC,EADlB,EAEG7D,EAAYM,aAAa,aAAc,CACrCwD,SAAUD,EAAMC,SAChBC,QAASF,EAAME,QACfC,YAAa,IAAIC,KAAKJ,EAAMK,WAAWC,cACvCC,aAAcP,EAAMQ,gBAAgB7J,SANzC,oXAAD,KAUC,IAEIgF,mBAAS,cKnGC8E,GAAT9G,KAER,OAAKA,EASH,sBAAKqE,UAAU,gBAAf,UACE,oBAAIA,UAAU,gBAAd,6BACC0C,OAAOC,KAAKhH,GAAMU,KAAI,SAACC,GACtB,OACE,wBAEE0D,UAAU,iDAFZ,UAIG1D,EAAIsG,cACL,sBAAM5C,UAAU,4CAAhB,SACGrE,EAAKW,OALHA,SAZX,uBAAM0D,UAAU,OAAhB,2CACiC,IAC/B,cAAC,IAAD,CAAaA,UAAU,kCCsBhB6C,GA7BF,WAAO,IAAD,EACgBnF,IAAzBtB,EADS,EACTA,YAAayB,EADJ,EACIA,QAErB,OACE,sBAAKmC,UAAU,wBAAf,UACE,oBAAIA,UAAU,oBAAd,sDACA,oBAAIA,UAAU,qBAAd,yEAECnC,EACC,gEAEA,oBAAImC,UAAU,gBAAd,SACG5D,EAAYC,KAAI,YAAqB,IAAlBC,EAAiB,EAAjBA,IAAKnE,EAAY,EAAZA,MACvB,OACE,cAAC,IAAD,CACE6H,UAAU,6BAEVwB,GAAE,gCAA2BlF,GAH/B,SAKGnE,GAHImE,YC8BNwG,GA/CG,WAAO,IACf9E,EAAkB+E,cAAlB/E,cADc,EAEgBD,EAAgBC,GAA9CC,EAFc,EAEdA,UAAWJ,EAFG,EAEHA,QAASjC,EAFN,EAEMA,MAFN,EAImBsC,EAAqBF,GAAtDpB,EAJc,EAIdA,MAAgBoG,EAJF,EAIPnF,QAEf,GAAIA,EAAS,OAAO,wDAEpB,GAAIjC,EACF,OACE,6EAAgDA,EAAMxD,WAVpC,IAYdD,EAA8B8F,EAA9B9F,MAAO8K,EAAuBhF,EAAvBgF,MAAOC,EAAgBjF,EAAhBiF,YACtB,OACE,sBAAKlD,UAAU,SAAf,UAEE,qBAAIA,UAAU,6BAAd,UACG7H,EAAO,IACR,uBAAO6H,UAAU,kBAAjB,SACE,8BAAIkD,EAAJ,uBAGJ,mBAAGlD,UAAU,0BAAb,SAAwCiD,IAExC,qBAAKjD,UAAU,gBAAf,SACGgD,EACC,uBAAMhD,UAAU,iBAAhB,yCAC+B/B,EAAU9F,MADzC,SAIAyE,EAAMP,KAAI,gBAAG8G,EAAH,EAAGA,QAAShL,EAAZ,EAAYA,MAAO0E,EAAnB,EAAmBA,SAAUC,EAA7B,EAA6BA,OAA7B,OACR,sBAEEkD,UAAU,8EAFZ,UAIG7H,EACD,iCACE,cAAC,IAAD,CAAMqJ,GAAE,sCAAiC1E,EAAjC,YAA2CD,GAAnD,sBALGsG,YCoDJC,GAlFC,WAAO,IACblL,EAAcqB,IAAdrB,UADY,EAES0G,IAArBC,EAFY,EAEZA,QAAShB,EAFG,EAEHA,QAFG,EAG6B0B,EAAe,OAC9DV,QAD8D,IAC9DA,OAD8D,EAC9DA,EAAStC,MADHY,EAHY,EAGZA,UAAoBkG,EAHR,EAGDxF,QAIbM,EAAcC,2BAGdkF,EAAWC,sBAAW,uCAC1B,+BAAAxI,EAAA,6DAASyI,EAAT,EAASA,cAAeC,EAAxB,EAAwBA,kBAAxB,SACQxG,EAASuG,EAAeC,GADhC,2CAD0B,sDAI1B,CACElF,UAAW,SAACmF,EAAGC,GAEbzL,EACE,uBADO,0CAE4ByL,EAAUF,kBAFtC,4CAITtK,YAAW,WACTgF,EACGyF,kBAAkB,CACjBC,SAAU,iBACVC,OAAO,EACPC,eAAe,EACfC,iBAAiB,IAElB7E,MAAK,WACJjH,EAAU,gCAEb,MAEL+L,QAAS,SAACrI,EAAO+H,GACfzL,EAAU,sBAAD,OACeyL,EAAUF,mBAChC7H,EAAMxD,YAMd,GAAIyF,EACF,OAAO,sBAAMmC,UAAU,iBAAhB,kCA5CW,IA+CZzD,EAASsC,EAATtC,KACR,OACE,gCACE,wBAAOyD,UAAU,gDAAjB,0BAEE,sBAAMA,UAAU,4CAAhB,SACGzD,OAGL,oBAAIyD,UAAU,WAAd,wBACCqD,EACC,sBAAMrD,UAAU,iBAAhB,+BAEA,oBAAIA,UAAU,OAAd,SACG7C,EAAUd,KAAI,SAAC6H,GAAD,OACb,qBAA2BlE,UAAU,uBAArC,UACGkE,EAAO/G,UACR,wBACE2C,QAAS,WACPwD,EAASa,OAAO,CACdX,cAAejH,EACfkH,kBAAmBS,EAAO/G,aAJhC,wBAFO+G,EAAO/G,oB,oBCbbiH,GAhDF,WAAO,IAAD,EACYrB,cADZ,EAESrE,EAAW,CAAE5B,OAFtB,EACTA,OACuCD,SAF9B,EACDA,WACRX,EAFS,EAETA,KAAM2B,EAFG,EAEHA,QAFG,EAI6BF,mBAAS,cAAe,CACpEC,YAAa,GACbU,UAAWpC,EAEXmI,OAAQ,SAACjI,GAAD,OACNA,EAAYxD,QAAO,qBAAG0D,MAAkBJ,EAAKoI,eALnCC,EAJG,EAIT5I,KAA2B6I,EAJlB,EAIkBA,OAQ3BtJ,EAAoCgB,EAApChB,KAAM/C,EAA8B+D,EAA9B/D,MAAesM,EAAevI,EAAvBY,OAErB,OACE,sBAAKkD,UAAU,oCAAf,UACE,qBAAIA,UAAU,qBAAd,UACE,oBAAIA,UAAU,4BAAd,qCACCwE,EACC,oEAEAD,EAAoBlI,KAAI,YAAqB,IAAlBC,EAAiB,EAAjBA,IAAKnE,EAAY,EAAZA,MAC9B,OACE,cAAC,EAAD,UACE,cAAC,IAAD,CAAMqJ,GAAE,gCAA2BlF,GAAnC,SAA2CnE,KADhCmE,SAQpBuB,EACC,sBAAMmC,UAAU,iBAAhB,wBAEA,sBAAKA,UAAU,6DAAf,UACE,0CAAayE,KACb,6BAAKtM,IACL,uBACA,yBACE6H,UAAU,gBACV0E,wBAAyB,CAAEC,OAAQC,KAAO1J,GAAQ,cCT/C2J,GA3BH,WACV,OACE,eAAC,IAAMC,SAAP,WACE,cAAC,EAAD,IAGA,0BAAS9E,UAAU,yBAAnB,UACE,sBAAMA,UAAU,aAAhB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO+E,KAAK,IAAIjB,OAAK,EAACkB,UAAWnC,KACjC,cAAC,IAAD,CAAOkC,KAAK,uCAAuCjB,OAAK,EAACkB,UAAWlC,KACpE,cAAC,IAAD,CAAOiC,KAAK,gDAAgDjB,OAAK,EAACkB,UAAWZ,KAC7E,cAAC,IAAD,CACEW,KAAK,WACLjB,OAAK,EACLkB,UAAW5B,UAMjB,cAAC,EAAD,W,SC1BF6B,GAAQ,SAAC,GAAqC,IAAnC3M,EAAkC,EAAlCA,GAAIH,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,QAAS8M,EAAc,EAAdA,QACnC,OACE,sBACElF,UAAS,4KADX,UAYE,sBAAKA,UAAU,4BAAf,UACE,oBAAIA,UAAU,uCAAd,SAAsD7H,IACtD,wBAAQ2H,QAAS,kBAAMoF,EAAQ5M,IAA/B,SACE,cAAC,KAAD,CAAO0H,UAAU,+CAGpB5H,MAgBQ+M,GAXK,WAAO,IAAD,EACQ5L,IAAxBtB,EADgB,EAChBA,OAAQI,EADQ,EACRA,YAEhB,OAAO+M,IAASC,aACdpN,EAAOoE,KAAI,gBAAG/D,EAAH,EAAGA,GAAOyH,EAAV,6BACT,cAAC,GAAD,aAAgBzH,GAAIA,EAAI4M,QAAS7M,GAAiB0H,GAAtCzH,MAEdkC,SAAS8K,eAAe,qBCzB5B9K,SAASC,gBAAgBC,aAAa,QAASjB,KAM/C,IAAM0E,GAAc,IAAIoH,cAAY,IAEpCH,IAASI,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,eAAC,sBAAD,CAAqBC,OAAQvH,GAA7B,UAEE,cAAC,qBAAD,CAAoBwH,SAAS,iBAE7B,cAAC,EAAD,UACE,eAAC,EAAD,WAEE,cAAC,GAAD,IAGA,cAAC,GAAD,gBAMVnL,SAAS8K,eAAe,W","file":"static/js/main.4d4e02b5.chunk.js","sourcesContent":["import React, { useContext, useEffect, useReducer } from \"react\";\n\nconst ALERT_LIFETIME = 5 * 1000;\n\nconst AlertContext = React.createContext({\n  alerts: [],\n  showAlert: (title, message) => null,\n  removeAlert: (id) => null,\n});\n\nfunction alertReducer(state, action) {\n  switch (action.type) {\n    // create new alert\n    case \"add\":\n      return [\n        ...state,\n        { id: state.length + 1, message: action.message, title: action.title },\n      ];\n    // remove existing alert\n    case \"remove\":\n      return state.filter(({ id }) => id !== action.id);\n    default:\n      return state;\n  }\n}\n\nconst AlertProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(alertReducer, []);\n\n  const showAlert = (title, message) => {\n    dispatch({ type: \"add\", title, message });\n  };\n\n  const removeAlert = (id) => {\n    dispatch({ type: \"remove\", id });\n  };\n\n  // automatically destroy alert each 3 seconds\n  useEffect(() => {\n    let timer;\n    if (state.length) {\n      timer = setTimeout(() => {\n        removeAlert(state[0].id);\n      }, ALERT_LIFETIME);\n    }\n\n    return () => {\n      timer && clearTimeout(timer);\n    };\n  }, [state]);\n\n  return (\n    <AlertContext.Provider\n      value={{\n        alerts: state,\n        showAlert,\n        removeAlert,\n      }}\n    >\n      {children}\n    </AlertContext.Provider>\n  );\n};\n\nconst useAlert = () => useContext(AlertContext);\n\nexport { AlertProvider, useAlert };\n","import React, { useState, useEffect, useContext } from \"react\";\n\nexport function getInitialColorMode() {\n  const persistedColorPreference = window.localStorage.getItem(\"color-mode\");\n  const hasPersistedPreference = typeof persistedColorPreference === \"string\";\n  // If the user has explicitly chosen light or dark,\n  // let's use it. Otherwise, this value will be null.\n  if (hasPersistedPreference) {\n    return persistedColorPreference;\n  }\n  // If they haven't been explicit, let's check the media\n  // query\n  const mql = window.matchMedia(\"(prefers-color-scheme: dark)\");\n  const hasMediaQueryPreference = typeof mql.matches === \"boolean\";\n  if (hasMediaQueryPreference) {\n    return mql.matches ? \"dark\" : \"light\";\n  }\n  // If they are using a browser/OS that doesn't support\n  // color themes, let's default to 'light'.\n  return \"light\";\n}\n\nexport function setDocumentColorMode(colorMode) {\n  document.documentElement.setAttribute(\"class\", colorMode);\n}\n\nconst ThemeContext = React.createContext({\n  colorMode: undefined, // light | dark | undefined (system's default),\n  setColorMode: () => null,\n});\n\nconst ThemeProvider = ({ children }) => {\n  const [colorMode, setColorModeState] = useState();\n\n  useEffect(() => {\n    setColorModeState(getInitialColorMode());\n  }, []);\n\n  const setColorMode = (value) => {\n    setDocumentColorMode(value);\n    setColorModeState(value);\n    window.localStorage.setItem(\"color-mode\", value);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ colorMode, setColorMode }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nconst useTheme = () => useContext(ThemeContext);\n\nexport { ThemeProvider, useTheme };\n","const API_URL = process.env.REACT_APP_HIVE_API_URL;\n\nclass HTTP {\n  async post(method, params) {\n    const resp = await fetch(API_URL, {\n      method: \"POST\",\n      body: JSON.stringify({\n        id: 1,\n        jsonrpc: \"2.0\",\n        params,\n        method,\n      }),\n    });\n\n    if (!resp.ok) throw new Error(`Post request failed: ${resp.statusText}`);\n\n    const data = await resp.json();\n\n    if (data.error) throw new Error(data.error.message);\n\n    return data.result;\n  }\n}\n\nexport default new HTTP();\n","import { Client } from \"@hiveio/dhive\";\n\nconst { REACT_APP_HIVE_API_URL } = process.env;\n\nexport const hiveClient = new Client([REACT_APP_HIVE_API_URL]);\n\nexport function getBlocks() {\n  return hiveClient.blockchain.getBlocks();\n}\n","import HTTP from \"./http\";\nimport { hiveClient } from \"./hive\";\n\nexport async function getPopularCommunities() {\n  const communities = await HTTP.post(\"bridge.list_pop_communities\", {\n    limit: 10,\n  });\n  return communities.map(([key, title]) => ({ key, title }));\n}\n\nexport async function getCommunity(name) {\n  return hiveClient.hivemind.getCommunity({\n    name,\n  });\n}\n\nexport async function getCommunityPosts(name) {\n  const posts = await HTTP.post(\"bridge.get_ranked_posts\", {\n    limit: 10,\n    sort: \"trending\",\n    tag: name,\n  });\n\n  return posts;\n}\n\nexport async function getPost({ permlink, author }) {\n  const post = await HTTP.post(\"bridge.get_post\", {\n    author,\n    permlink,\n  });\n\n  return post;\n}\n","import { PrivateKey } from \"@hiveio/dhive\";\nimport { hiveClient } from \"./hive\";\nimport http from \"./http\";\n\nconst { REACT_APP_HIVE_USER, REACT_APP_HIVE_POSTING } = process.env;\n\nexport function getAccount() {\n  return hiveClient.database.getAccounts([REACT_APP_HIVE_USER]);\n}\n\nexport function getFollowing(account) {\n  return http.post(\"condenser_api.get_following\", [account, null, \"blog\"]);\n}\n\nexport function follow(follower, following) {\n  return hiveClient.broadcast.json(\n    {\n      id: \"follow\",\n      required_posting_auths: [REACT_APP_HIVE_USER],\n      required_auths: [],\n      json: JSON.stringify([\"follow\", { follower, following, what: [\"blog\"] }]),\n    },\n    PrivateKey.from(REACT_APP_HIVE_POSTING)\n  );\n}\n\nexport function unfollow(follower, following) {\n  return hiveClient.broadcast.json(\n    {\n      id: \"follow\",\n      required_posting_auths: [REACT_APP_HIVE_USER],\n      required_auths: [],\n      json: JSON.stringify([\"follow\", { follower, following, what: [] }]),\n    },\n    PrivateKey.from(REACT_APP_HIVE_POSTING)\n  );\n}\n\nunfollow(REACT_APP_HIVE_USER, \"tattoodjay\");\n\n","import { useEffect, useState } from \"react\";\nimport { useQuery, useQueryClient } from \"react-query\";\nimport {\n  getPopularCommunities,\n  getCommunity,\n  getCommunityPosts,\n  getPost,\n} from \"../services/communities\";\nimport { getBlocks } from \"../services/hive\";\nimport { getAccount, getFollowing } from \"../services/account\";\n\n// Get trending communities\nexport function useGetCommunities() {\n  const {\n    data: communities,\n    isLoading: loading,\n    error,\n  } = useQuery(\"communities\", getPopularCommunities, {\n    initialData: [],\n  });\n\n  return { communities, loading, error };\n}\n\n// Get community by name\nexport function useGetCommunity(communityName) {\n  const {\n    data: community,\n    isLoading: loading,\n    error,\n  } = useQuery(\n    [\"communities\", communityName],\n    () => getCommunity(communityName),\n    {\n      initialData: {},\n    }\n  );\n\n  return { community, loading, error };\n}\n\n// Get trending posts for community\n// and keeps this posts by author and permlink\n// to use in the Post page, so we can pre-cache it\n// when we fetch on the Community page\nexport function useGetCommunityPosts(communityName) {\n  const queryClient = useQueryClient();\n\n  const {\n    data: posts,\n    isLoading: loading,\n    error,\n  } = useQuery(\n    [\"posts\", communityName],\n    () => getCommunityPosts(communityName),\n    {\n      enabled: !!communityName,\n      initialData: [],\n      onSuccess: (posts) => {\n        // traverse and put posts by query key to [post, author, permlink] query\n        posts.forEach((post) => {\n          queryClient.setQueryData([\"posts\", post.author, post.permlink], post);\n        });\n      },\n    }\n  );\n\n  return { posts, loading, error };\n}\n\n// Get single post\nexport function useGetPost({ author, permlink }) {\n  const {\n    data: post,\n    isLoading: loading,\n    error,\n  } = useQuery(\n    [\"posts\", author, permlink],\n    () => getPost({ author, permlink }),\n    {\n      initialData: {},\n    }\n  );\n\n  return { post, loading, error };\n}\n\n// Get blockchain info data\nexport function useBlockInfo() {\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    (async () => {\n      for await (const block of getBlocks()) {\n        queryClient.setQueryData(\"block-info\", {\n          block_id: block.block_id,\n          witness: block.witness,\n          server_time: new Date(block.timestamp).toUTCString(),\n          transactions: block.transaction_ids.length,\n        });\n      }\n    })();\n  }, []);\n\n  return useQuery(\"block-info\");\n}\n\n// Get account\nexport function useGetAccount() {\n  const [account, setAccount] = useState({});\n  const [loading, setLoading] = useState();\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    setLoading(true);\n\n    getAccount()\n      .then((acc) => setAccount(acc[0]))\n      .catch(setError)\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  return { account, loading, error };\n}\n\n// Get account followings\nexport function useGetFollowing(account) {\n  const {\n    data: following,\n    isLoading: loading,\n    error,\n  } = useQuery(\"following-list\", () => getFollowing(account), {\n    initialData: [],\n    enabled: !!account\n  });\n\n  return { following, loading, error };\n}\n","import { forwardRef } from \"react\";\nimport classNames from \"classnames\";\n\nconst Button = forwardRef(({ active, children, onClick, ...rest }, ref) => (\n  <button\n    ref={ref}\n    className={classNames(\n      `hover:bg-gray-800\n      hover:text-gray-200\n      dark:hover:bg-gray-200\n      dark:hover:text-gray-800\n      p-2\n      rounded-lg\n      font-semibold\n      text-lg`,\n      {\n        \"dark:bg-gray-100\": active,\n        \"dark:text-gray-700\": active,\n        \"bg-gray-700\": active,\n        \"text-gray-100\": active,\n      }\n    )}\n    onClick={onClick}\n    {...rest}\n  >\n    {children}\n  </button>\n));\n\nexport default Button;\n","import { createRef, useRef, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useOnClickOutside } from \"../hooks/utility\";\nimport Button from \"./Button\";\n\nconst Dropdown = ({ label, items = []}) => {\n  const [open, setOpen] = useState(false);\n  const menuRef = useRef();\n  const btnRef = createRef();\n\n  useOnClickOutside(\n    menuRef,\n    () => {\n      setOpen(false);\n    },\n    [btnRef]\n  );\n\n  return (\n    <div className=\"mx-2 relative\">\n      <Button ref={btnRef} active={open} onClick={() => setOpen(!open)}>\n        {label}\n      </Button>\n\n      {open && (\n        <ul\n          ref={menuRef}\n          className=\"absolute top-12 left-0 right-0 bg-gray-700 text-gray-100 dark:text-gray-800 dark:bg-white rounded-lg\"\n        >\n          {items.map(({ label, link }) => (\n            <li className=\"p-2 font-semibold hover:opacity-75\" key={label} onClick={() => setOpen(false)}>\n              <Link to={link}>{label}</Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Dropdown;\n","import { useEffect } from \"react\";\n\nexport function useOnClickOutside(ref, handler, ignoreRefs = []) {\n  useEffect(\n    () => {\n      const listener = (event) => {\n        // Do nothing if clicking ref's element or descendent elements or \n        // element is in the ignored refs list\n        if (\n          !ref.current ||\n          ref.current.contains(event.target) ||\n          ignoreRefs.some((ir) => ir.current.contains(event.target))\n        ) {\n          return;\n        }\n        handler(event);\n      };\n      document.addEventListener(\"mousedown\", listener);\n      document.addEventListener(\"touchstart\", listener);\n      return () => {\n        document.removeEventListener(\"mousedown\", listener);\n        document.removeEventListener(\"touchstart\", listener);\n      };\n    },\n    // Add ref and handler to effect dependencies\n    // It's worth noting that because passed in handler is a new ...\n    // ... function on every render that will cause this effect ...\n    // ... callback/cleanup to run every render. It's not a big deal ...\n    // ... but to optimize you can wrap handler in useCallback before ...\n    // ... passing it into this hook.\n\n    // ignoreRefs used for avoiding some elements\n    [ref, handler, ignoreRefs]\n  );\n}\n","import { useEffect } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { SunIcon, MoonIcon, RefreshIcon } from \"@heroicons/react/outline\";\nimport classNames from \"classnames\";\nimport { useAlert } from \"../hooks/alert\";\nimport { useTheme } from \"../hooks/theme\";\nimport { useGetCommunities } from \"../hooks/data\";\nimport Button from \"./Button\";\nimport Dropdown from \"./Dropdown\";\n\nconst Nav = () => {\n  const history = useHistory();\n  const { colorMode, setColorMode } = useTheme();\n  const { showAlert } = useAlert();\n\n  const { communities, loading, error } = useGetCommunities();\n\n  useEffect(() => {\n    if (error) {\n      showAlert(\"Error when getting communities!\", error.message);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [error]);\n\n  return (\n    <nav className=\"flex justify-between items-center my-8\">\n      <div className=\"flex\">\n        {/* Brand */}\n        <span\n          className=\"text-3xl font-semibold mr-4 text-red-500 cursor-pointer\"\n          onClick={() => history.push(\"/\")}\n        >\n          Hive Social Network\n        </span>\n        \n        {/* Menu Items */}\n        <Dropdown\n          label={\n            <span\n              className={classNames(\"flex items-center\", {\n                \"opacity-60\": loading,\n                \"pointer-events-none\": loading,\n                \"cursor-wait\": loading\n              })}\n            >\n              Trending Communities\n              {loading && <RefreshIcon className=\"h-5 w-5 ml-2 animate-spin\" />}\n            </span>\n          }\n          items={communities.map(({ key, title }) => ({\n            label: title,\n            link: `/trending-communities/${key}`,\n          }))}\n        />\n\n        <Button>\n          <Link to=\"/profile\">Profile</Link>\n        </Button>\n      </div>\n\n      <button\n        onClick={() => {\n          if (colorMode === \"dark\") {\n            setColorMode(\"light\");\n            showAlert(\"Theme changed\", `Just shine like a diamond ☀️`);\n          } else {\n            setColorMode(\"dark\");\n            showAlert(\"Theme changed\", `You can't escape from the darkness 🌚`);\n          }\n        }}\n      >\n        {colorMode === \"dark\" && (\n          <SunIcon className=\"h-10 w-10 text-yellow-300\" />\n        )}\n        {colorMode === \"light\" && (\n          <MoonIcon className=\"h-10 w-10 text-indigo-900\" />\n        )}\n      </button>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport { RefreshIcon } from \"@heroicons/react/outline\";\nimport { useBlockInfo } from \"../hooks/data\";\n\nconst Info = () => {\n  const { data } = useBlockInfo();\n\n  if (!data)\n    return (\n      <span className=\"flex\">\n        Subscribing to Blockchain Info{\" \"}\n        <RefreshIcon className=\"h-5 w-5 ml-2 animate-spin\" />\n      </span>\n    );\n\n  return (\n    <div className=\"flex flex-col\">\n      <h2 className=\"text-3xl mb-4\">Blockchain Info</h2>\n      {Object.keys(data).map((key) => {\n        return (\n          <label\n            key={key}\n            className=\"flex flex-col mb-4 font-semibold text-gray-500\"\n          >\n            {key.toUpperCase()}\n            <span className=\"font-normal text-gray-800 dark:text-white\">\n              {data[key]}\n            </span>\n          </label>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Info;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useGetCommunities } from \"../hooks/data\";\n\nconst Home = () => {\n  const { communities, loading } = useGetCommunities();\n\n  return (\n    <div className=\"prose dark:text-white\">\n      <h2 className=\"dark:text-gray-50\">Welcome to Hive Social Network Platform!</h2>\n      <h3 className=\"dark:text-gray-200\">Select a community to explore awesome contents 🥳</h3>\n\n      {loading ? (\n        <div>Loading Top 10 Communities...</div>\n      ) : (\n        <ul className=\"flex flex-col\">\n          {communities.map(({ key, title }) => {\n            return (\n              <Link\n                className=\"text-lg dark:text-gray-300\"\n                key={key}\n                to={`/trending-communities/${key}`}\n              >\n                {title}\n              </Link>\n            );\n          })}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n","import { useParams, Link } from \"react-router-dom\";\nimport { useGetCommunity, useGetCommunityPosts } from \"../hooks/data\";\n\nconst Community = () => {\n  const { communityName } = useParams();\n  const { community, loading, error } = useGetCommunity(communityName);\n\n  const { posts, loading: postsLoading } = useGetCommunityPosts(communityName);\n\n  if (loading) return <span>Loading community...</span>;\n\n  if (error)\n    return (\n      <span>An error occured when loading community: {error.message}</span>\n    );\n  const { title, about, subscribers } = community;\n  return (\n    <div className=\"w-full\">\n      \n      <h2 className=\"dark:text-gray-50 text-3xl\">\n        {title}{\" \"}\n        <small className=\"font-light ml-2\">\n          <i>{subscribers} Subscribers</i>\n        </small>\n      </h2>\n      <p className=\"dark:text-gray-200 my-2\">{about}</p>\n\n      <div className=\"flex flex-col\">\n        {postsLoading ? (\n          <span className=\"text-green-400\">\n            Loading community Posts for {community.title}...\n          </span>\n        ) : (\n          posts.map(({ post_id, title, permlink, author }) => (\n            <div\n              key={post_id}\n              className=\"flex justify-between p-4 my-2 bg-white w-full rounded-lg dark:text-gray-800\"\n            >\n              {title}\n              <button>\n                <Link to={`/trending-communities/posts/${author}/${permlink}`}>Read</Link>\n              </button>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Community;\n","import { useGetAccount, useGetFollowing } from \"../hooks/data\";\nimport { useAlert } from \"../hooks/alert\";\nimport { unfollow } from \"../services/account\";\nimport { useMutation, useQueryClient } from \"react-query\";\n\nconst Profile = () => {\n  const { showAlert } = useAlert();\n  const { account, loading } = useGetAccount();\n  const { following, loading: followersLoading } = useGetFollowing(\n    account?.name\n  );\n\n  const queryClient = useQueryClient();\n\n  // unfollow account and update followers list with mutation and invalidateQueries\n  const mutation = useMutation(\n    async ({ myAccountName, accountToUnfollow }) => {\n      await unfollow(myAccountName, accountToUnfollow);\n    },\n    {\n      onSuccess: (_, variables) => {\n        // After 10 seconds we refetch following list to refresh\n        showAlert(\n          \"Unfollow successfull\",\n          `Successfully unfollowed account ${variables.accountToUnfollow}, after 10 seconds list will be updated`\n        );\n        setTimeout(() => {\n          queryClient\n            .invalidateQueries({\n              queryKey: \"following-list\",\n              exact: true,\n              refetchActive: true,\n              refetchInactive: true,\n            })\n            .then(() => {\n              showAlert(\"Refreshed follower list\");\n            });\n        }, 10000);\n      },\n      onError: (error, variables) => {\n        showAlert(\n          `Couldn't unfollow: ${variables.accountToUnfollow}`,\n          error.message\n        );\n      },\n    }\n  );\n\n  if (loading) {\n    return <span className=\"text-green-400\">Loading account info</span>;\n  }\n\n  const { name } = account;\n  return (\n    <div>\n      <label className=\"flex text-lg mb-4 font-semibold text-gray-500\">\n        Account name:\n        <span className=\"font-normal text-gray-800 dark:text-white\">\n          {name}\n        </span>\n      </label>\n      <h3 className=\"text-2xl\">Followers </h3>\n      {followersLoading ? (\n        <span className=\"text-green-400\">Loading followers</span>\n      ) : (\n        <ul className=\"w-96\">\n          {following.map((follow) => (\n            <li key={follow.following} className=\"flex justify-between\">\n              {follow.following}\n              <button\n                onClick={() => {\n                  mutation.mutate({\n                    myAccountName: name,\n                    accountToUnfollow: follow.following,\n                  });\n                }}\n              >\n                Unfollow\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Profile;\n","import { Link, useParams } from \"react-router-dom\";\nimport marked from \"marked\";\nimport { useQuery } from \"react-query\";\nimport { useGetPost } from \"../hooks/data\";\nimport Button from \"../components/Button\";\n\nconst Post = () => {\n  const { author, permlink } = useParams();\n  const { post, loading } = useGetPost({ author, permlink });\n  \n  const { data: filteredCommunities, isIdle } = useQuery(\"communities\", {\n    initialData: [],\n    enabled: !!post,\n    // show other communities other than the current one\n    select: (communities) =>\n      communities.filter(({ key }) => key !== post.category),\n  });\n\n  const { body, title, author: postAuthor } = post;\n\n  return (\n    <div className=\" py-2 rounded-lg grid grid-cols-3\">\n      <ul className=\"flex flex-col px-2\">\n        <h2 className=\"text-2xl text-center mb-6\">Check Other Communities</h2>\n        {isIdle ? (\n          <span> Waiting for communnity data... </span>\n        ) : (\n          filteredCommunities.map(({ key, title }) => {\n            return (\n              <Button key={key}>\n                <Link to={`/trending-communities/${key}`}>{title}</Link>\n              </Button>\n            );\n          })\n        )}\n      </ul>\n\n      {loading ? (\n        <span className=\"text-green-400\">Loading...</span>\n      ) : (\n        <div className=\"prose dark:bg-gray-50 col-span-2 p-4 rounded-lg max-w-full\">\n          <h3>Author: {postAuthor}</h3>\n          <h1>{title}</h1>\n          <br />\n          <article\n            className=\"prose mx-auto\"\n            dangerouslySetInnerHTML={{ __html: marked(body || \"\") }}\n          ></article>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Post;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport Nav from \"./components/Nav\";\nimport Info from \"./components/Info\";\nimport Home from \"./pages/Home\";\nimport Community from \"./pages/Community\";\nimport Profile from \"./pages/Profile\";\nimport Post from \"./pages/Post\";\n\nconst App = () => {\n  return (\n    <React.Fragment>\n      <Nav />\n\n      {/* Routes */}\n      <section className=\"grid grid-cols-4 gap-4\">\n        <main className=\"col-span-3\">\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/trending-communities/:communityName\" exact component={Community}/>\n            <Route path=\"/trending-communities/posts/:author/:permlink\" exact component={Post}/>\n            <Route\n              path=\"/profile\"\n              exact\n              component={Profile}\n            />\n          </Switch>\n        </main>\n\n        {/* Info section */}\n        <Info />\n      </section>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { XIcon } from \"@heroicons/react/solid\";\nimport { useAlert } from \"../hooks/alert\";\n\nconst Alert = ({ id, title, message, onClose }) => {\n  return (\n    <div\n      className={`bg-gray-800\n      dark:bg-white\n      dark:text-gray-900\n      text-gray-50\n      flex\n      flex-col\n      p-4\n      w-80\n      rounded-lg\n      my-2 shadow-lg`}\n    >\n      <div className=\"flex justify-between mb-4\">\n        <h4 className=\"text-yellow-300 dark:text-yellow-600\">{title}</h4>\n        <button onClick={() => onClose(id)}>\n          <XIcon className=\"h-6 w-6 text-white dark:text-gray-900\" />\n        </button>\n      </div>\n      {message}\n    </div>\n  );\n};\n\nconst AlertOutlet = () => {\n  const { alerts, removeAlert } = useAlert();\n\n  return ReactDOM.createPortal(\n    alerts.map(({ id, ...rest }) => (\n      <Alert key={id} id={id} onClose={removeAlert} {...rest} />\n    )),\n    document.getElementById(\"alert-container\")\n  );\n};\n\nexport default AlertOutlet;\n","import \"./index.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport { QueryClientProvider, QueryClient } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport App from \"./App\";\nimport { ThemeProvider, getInitialColorMode } from \"./hooks/theme\";\nimport AlertOutlet from \"./components/Alert\";\nimport { AlertProvider } from \"./hooks/alert\";\n\n// get initial color mode to prevent UI flickering\ndocument.documentElement.setAttribute(\"class\", getInitialColorMode());\n\n/* !!! Please check defaults and play around with differen configurations\n * !!! Defaults can be complicated at the beginning :)\n * TODO: https://react-query.tanstack.com/guides/important-defaults\n*/\nconst queryClient = new QueryClient({});\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <QueryClientProvider client={queryClient}>\n        {/* Add devtools here and give it a go */}\n        <ReactQueryDevtools position=\"bottom-right\" />\n\n        <AlertProvider>\n          <ThemeProvider>\n            {/* Global Alert Component */}\n            <AlertOutlet />\n\n            {/* App */}\n            <App />\n          </ThemeProvider>\n        </AlertProvider>\n      </QueryClientProvider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}